type DPoolList @entity {
  id: ID!
  pools: [DPool!]!
  numPools: BigInt!
  numUsers: BigInt!
  numActiveUsers: BigInt!
  numFunders: BigInt!
}

type DPool @entity {
  id: ID!
  address: String!
  moneyMarket: String!
  stablecoin: String!
  interestModel: String!
  users: [User!]! @derivedFrom(field: "pools")
  numUsers: BigInt!
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  numDeposits: BigInt!
  numActiveDeposits: BigInt!
  totalActiveDeposit: BigDecimal!
  totalHistoricalDeposit: BigDecimal!
  totalInterestPaid: BigDecimal!
  unfundedDepositAmount: BigDecimal!
  funders: [Funder!]! @derivedFrom(field: "pools")
  numFunders: BigInt!
  fundings: [Funding!]! @derivedFrom(field: "pool")
  numFundings: BigInt!
  MinDepositPeriod: BigInt!
  MaxDepositPeriod: BigInt!
  MinDepositAmount: BigDecimal!
  MaxDepositAmount: BigDecimal!
  mphMintingMultiplier: BigDecimal!
  mphDepositorRewardMultiplier: BigDecimal!
  mphFunderRewardMultiplier: BigDecimal!
  oneYearInterestRate: BigDecimal!
  surplus: BigDecimal!
  moneyMarketIncomeIndex: BigInt!
  oracleInterestRate: BigDecimal!
}

type User @entity {
  id: ID!
  address: String!
  pools: [DPool!]!
  numPools: BigInt!
  deposits: [Deposit!]! @derivedFrom(field: "user")
  numDeposits: BigInt!
  numActiveDeposits: BigInt!
  totalDepositByPool: [UserTotalDeposit!]! @derivedFrom(field: "user")
  totalMPHEarned: BigDecimal!
  totalMPHPaidBack: BigDecimal!
}

type UserTotalDeposit @entity {
  id: ID!
  user: User!
  pool: DPool!
  totalActiveDeposit: BigDecimal!
  totalHistoricalDeposit: BigDecimal!
  totalInterestEarned: BigDecimal!
  totalHistoricalInterestEarned: BigDecimal!
}

type Deposit @entity {
  id: ID!
  nftID: BigInt!
  user: User!
  pool: DPool!
  amount: BigDecimal!
  maturationTimestamp: BigInt!
  active: Boolean!
  depositTimestamp: BigInt!
  interestEarned: BigDecimal!
  fundingID: BigInt!
  mintMPHAmount: BigDecimal!
  takeBackMPHAmount: BigDecimal!
  initialMoneyMarketIncomeIndex: BigInt!
}

type Funder @entity {
  id: ID!
  address: String!
  pools: [DPool!]!
  numPools: BigInt!
  fundings: [Funding!]! @derivedFrom(field: "funder")
  numFundings: BigInt!
  totalMPHEarned: BigDecimal!
  totalInterestByPool: [FunderTotalInterest!]! @derivedFrom(field: "funder")
}

type FunderTotalInterest @entity {
  id: ID!
  funder: Funder!
  pool: DPool!
  totalDeficitFunded: BigDecimal!
  totalHistoricalDeficitFunded: BigDecimal!
  totalInterestEarned: BigDecimal!
  totalHistoricalInterestEarned: BigDecimal!
  totalRecordedFundedDepositAmount: BigDecimal!
}

type Funding @entity {
  id: ID!
  nftID: BigInt!
  funder: Funder!
  pool: DPool!
  fromDepositID: BigInt!
  toDepositID: BigInt!
  active: Boolean!
  recordedFundedDepositAmount: BigDecimal!
  recordedMoneyMarketIncomeIndex: BigInt!
  initialFundedDepositAmount: BigDecimal!
  fundedDeficitAmount: BigDecimal!
  totalInterestEarned: BigDecimal!
  mintMPHAmount: BigDecimal!
}

type MPHHolder @entity {
  id: ID!
  address: String!
  mphBalance: BigDecimal!
  stakedMPHBalance: BigDecimal!
  totalHistoricalReward: BigDecimal!
}

type MPH @entity {
  id: ID!
  totalSupply: BigDecimal!
  totalStakedMPHBalance: BigDecimal!
  totalHistoricalReward: BigDecimal!
  rewardPerSecond: BigDecimal!
  rewardPerMPHPerSecond: BigDecimal!
}